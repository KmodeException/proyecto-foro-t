openapi: 3.0.0
info:
  title: Foro-T API
  version: 1.0.0
  description: API para foro de traducción de videojuegos

servers:
  - url: http://localhost:5000/api
    description: Servidor de desarrollo

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Usuario registrado exitosamente

  /auth/login:
    post:
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Inicio de sesión exitoso
        '401':
          description: Credenciales inválidas

  /auth/profile:
    get:
      summary: Obtener información del perfil del usuario autenticado
      security:
        - bearerAuth: []  # Indica que este endpoint requiere autenticación
      responses:
        '200':
          description: Información del perfil
        '401':
          description: No autorizado

  /subsections:
    get:
      summary: Obtener todos los subapartados
      responses:
        '200':
          description: Lista de subapartados
        '404':
          description: No se encontraron subapartados

    post:
      summary: Crear un nuevo subapartado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                description:
                  type: string
                rules:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
      responses:
        '201':
          description: Subapartado creado exitosamente
        '400':
          description: Solicitud inválida

  /posts:
    post:
      summary: Crear un nuevo post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                subSection:
                  type: string
      responses:
        '201':
          description: Post creado exitosamente
        '400':
          description: Solicitud inválida

    get:
      tags: [Posts]
      summary: Obtener todos los posts
      responses:
        200:
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /auth/check-role:
    get:
      tags:
        - Authentication
      summary: Verificar rol de usuario
      security:
        - BearerAuth: []
      responses:
        200:
          description: Rol verificado
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                  translatorProfile:
                    $ref: '#/components/schemas/User/properties/translatorProfile'

  /games:
    get:
      tags:
        - Games
      summary: Obtener lista de juegos
      responses:
        200:
          description: Lista de juegos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    
    post:
      tags:
        - Games
      summary: Crear nuevo juego
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                platform:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Juego creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

  /games/{id}/status:
    patch:
      tags:
        - Games
      summary: Actualizar estado de traducción
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, in_progress, completed]
                translationProgress:
                  type: number

  /api/posts/subsection/{subSectionId}:
    get:
      tags: [Posts]
      summary: Obtener posts por subsección
      parameters:
        - in: path
          name: subSectionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/forum/threads:
    post:
      tags:
        - Forum
      summary: Crear nuevo hilo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        201:
          description: Hilo creado exitosamente
        403:
          description: Karma insuficiente
    
    get:
      tags:
        - Forum
      summary: Obtener todos los hilos
      responses:
        200:
          description: Lista de hilos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'

  /api/forum/posts:
    post:
      tags:
        - Forum
      summary: Crear post en hilo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumPost'
      responses:
        201:
          description: Post creado exitosamente
        403:
          description: Karma insuficiente

  /api/forum/comments:
    post:
      tags:
        - Forum
      summary: Crear comentario
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumComment'
      responses:
        201:
          description: Comentario creado exitosamente
        403:
          description: Karma insuficiente para comentar

  /api/forum/posts/{threadId}:
    get:
      tags:
        - Forum
      summary: Obtener posts de un hilo
      parameters:
        - in: path
          name: threadId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Lista de posts del hilo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPost'

  /api/forum/posts/{id}/vote:
    post:
      tags:
        - Forum
      summary: Votar un post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [up, down]
      responses:
        200:
          description: Voto registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPost'
        403:
          description: Karma insuficiente para votar

  /api/forum/comments/{postId}:
    get:
      tags:
        - Forum
      summary: Obtener comentarios de un post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Lista de comentarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumComment'

  /api/forum/comments/{id}/vote:
    post:
      tags:
        - Forum
      summary: Votar un comentario
      description: Permite votar positiva o negativamente un comentario
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del comentario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [up, down]
                  description: Tipo de voto
      responses:
        200:
          description: Voto registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumComment'
        403:
          description: Karma insuficiente para votar
        404:
          description: Comentario no encontrado

  /api/forum/users/{userId}/karma:
    get:
      tags:
        - Forum
      summary: Obtener estado de karma del usuario
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Estado de karma
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KarmaResponse'
        404:
          description: Usuario no encontrado



  /api/forum/moderation/reports:
    post:
      tags: [Moderation]
      summary: Crear reporte
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, translator, moderator, admin]
        reputation:
          type: number
        level:
          type: string

    Game:
      type: object
      required:
        - title
        - platform
      properties:
        _id:
          type: string
        title:
          type: string
        platform:
          type: array
          items:
            type: string
            enum: [PC, PS4, PS5, Xbox One, Xbox Series, Switch, Mobile]
        status:
          type: string
          enum: [pending, in_progress, completed]
        translationProgress:
          type: number
          minimum: 0
          maximum: 100
        translationLead:
          $ref: '#/components/schemas/User'
        translators:
          type: array
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              assignedDate:
                type: string
                format: date-time

    Post:
      type: object
      required:
        - title
        - content
        - author
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        subsection:
          $ref: '#/components/schemas/SubSection'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        votes:
          type: object
          properties:
            upvotes:
              type: number
            downvotes:
              type: number

    Comment:
      type: object
      required:
        - content
        - author
        - post
      properties:
        _id:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SubSection:
      type: object
      required:
        - name
        - description
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Thread:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Nombre del hilo
        description:
          type: string
          description: Descripción del hilo
        type:
          type: string
          enum: [official, community]
        creator:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ForumPost:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        thread:
          $ref: '#/components/schemas/Thread'
        votes:
          type: object
          properties:
            up:
              type: array
              items:
                $ref: '#/components/schemas/User'
            down:
              type: array
              items:
                $ref: '#/components/schemas/User'

    ForumComment:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/ForumPost'
        votes:
          type: object
          properties:
            up:
              type: array
              items:
                $ref: '#/components/schemas/User'
            down:
              type: array
              items:
                $ref: '#/components/schemas/User'

    KarmaResponse:
      type: object
      properties:
        message:
          type: string
        currentKarma:
          type: number
        level:
          type: string
        restrictions:
          type: object
          properties:
            canCreateThreads:
              type: boolean
            canComment:
              type: boolean
            readOnly:
              type: boolean

    KarmaRestrictions:
      type: object
      properties:
        canCreateThreads:
          type: boolean
          description: Permiso para crear hilos
        canComment:
          type: boolean
          description: Permiso para comentar
        readOnly:
          type: boolean
          description: Usuario en modo lectura
    
    UserLevel:
      type: object
      properties:
        name:
          type: string
          enum: [Novato, Contribuidor, Experto]
        minPoints:
          type: number
        permissions:
          $ref: '#/components/schemas/KarmaRestrictions'

    ModAction:
      type: object
      properties:
        type:
          type: string
          enum: [warn, temp_ban, perm_ban]
        reason:
          type: string
        moderator:
          $ref: '#/components/schemas/User'
        targetUser:
          $ref: '#/components/schemas/User'
        expiresAt:
          type: string
          format: date-time
    
    Report:
      type: object
      properties:
        type:
          type: string
          enum: [spam, offensive, inappropriate]
        reason:
          type: string
        reporter:
          $ref: '#/components/schemas/User'
        reported:
          $ref: '#/components/schemas/User'
        content:
          type: object
          properties:
            type:
              type: string
              enum: [post, comment, thread]
            id:
              type: string
        status:
          type: string
          enum: [pending, resolved, dismissed]
